{"version":3,"file":"navigationCallback-Dv4a5ajJ.js","sources":["../../src/utils/navigationCallback.ts"],"sourcesContent":["/**\n * 네비게이션 콜백 관리 유틸리티\n * URL 상태 기반으로 컴포넌트 간 콜백을 관리하고 브라우저 히스토리를 깔끔하게 유지\n */\n\nexport interface NavigationState {\n  returnPath?: string;\n  returnQuery?: Record<string, string>;\n  returnFragment?: string;\n  contextData?: Record<string, any>;\n}\n\nexport class NavigationCallback {\n  /**\n   * 콜백 정보를 URL에 인코딩\n   */\n  static encodeCallback(\n    targetPath: string, \n    returnPath: string,\n    options?: {\n      query?: Record<string, string>;\n      fragment?: string;\n      contextData?: Record<string, any>;\n    }\n  ): string {\n    const url = new URL(targetPath, window.location.origin);\n    \n    // 기본 리턴 패스\n    url.searchParams.set('returnPath', returnPath);\n    \n    // 쿼리 파라미터\n    if (options?.query) {\n      url.searchParams.set('returnQuery', JSON.stringify(options.query));\n    }\n    \n    // 프래그먼트\n    if (options?.fragment) {\n      url.searchParams.set('returnFragment', options.fragment);\n    }\n    \n    // 컨텍스트 데이터\n    if (options?.contextData) {\n      url.searchParams.set('contextData', JSON.stringify(options.contextData));\n    }\n    \n    return url.pathname + url.search;\n  }\n  \n  /**\n   * URL에서 콜백 정보를 디코딩\n   */\n  static decodeCallback(searchParams: URLSearchParams): NavigationState | null {\n    const returnPath = searchParams.get('returnPath');\n    if (!returnPath) return null;\n    \n    const state: NavigationState = { returnPath };\n    \n    // 쿼리 파라미터 복원\n    const returnQuery = searchParams.get('returnQuery');\n    if (returnQuery) {\n      try {\n        state.returnQuery = JSON.parse(returnQuery);\n      } catch (e) {\n        console.warn('Failed to parse returnQuery:', e);\n      }\n    }\n    \n    // 프래그먼트 복원\n    const returnFragment = searchParams.get('returnFragment');\n    if (returnFragment) {\n      state.returnFragment = returnFragment;\n    }\n    \n    // 컨텍스트 데이터 복원\n    const contextData = searchParams.get('contextData');\n    if (contextData) {\n      try {\n        state.contextData = JSON.parse(contextData);\n      } catch (e) {\n        console.warn('Failed to parse contextData:', e);\n      }\n    }\n    \n    return state;\n  }\n  \n  /**\n   * 콜백을 실행하여 원래 위치로 이동\n   */\n  static executeCallback(\n    navigate: (path: string) => void,\n    state: NavigationState,\n    options?: {\n      cleanupHistory?: boolean;\n      scrollToElement?: string;\n    }\n  ): void {\n    let targetPath = state.returnPath!;\n    \n    // 쿼리 파라미터 추가\n    if (state.returnQuery) {\n      const url = new URL(targetPath, window.location.origin);\n      Object.entries(state.returnQuery).forEach(([key, value]) => {\n        url.searchParams.set(key, value);\n      });\n      targetPath = url.pathname + url.search;\n    }\n    \n    // 프래그먼트 추가\n    if (state.returnFragment) {\n      targetPath += '#' + state.returnFragment;\n    }\n    \n    navigate(targetPath);\n    \n    // 히스토리 정리\n    if (options?.cleanupHistory) {\n      // 다음 틱에서 히스토리 정리 (페이지 이동 후)\n      setTimeout(() => {\n        if (state.returnFragment) {\n          // 프래그먼트 제거하여 URL 깔끔하게 유지\n          const cleanUrl = targetPath.split('#')[0];\n          window.history.replaceState(null, '', cleanUrl);\n        }\n        \n        // 특정 요소로 스크롤\n        if (options?.scrollToElement) {\n          const element = document.getElementById(options.scrollToElement);\n          if (element) {\n            element.scrollIntoView({ behavior: 'smooth', block: 'start' });\n          }\n        }\n      }, 100);\n    }\n  }\n  \n  /**\n   * 현재 위치를 기반으로 콜백 URL 생성\n   */\n  static createCallbackFromCurrent(\n    targetPath: string,\n    options?: {\n      preserveQuery?: boolean;\n      preserveFragment?: boolean;\n      contextData?: Record<string, any>;\n    }\n  ): string {\n    const currentPath = window.location.pathname;\n    const currentSearch = new URLSearchParams(window.location.search);\n    const currentFragment = window.location.hash.substring(1);\n    \n    const callbackOptions: any = {};\n    \n    // 현재 쿼리 파라미터 보존\n    if (options?.preserveQuery && currentSearch.toString()) {\n      const queryObj: Record<string, string> = {};\n      currentSearch.forEach((value, key) => {\n        // 콜백 관련 파라미터는 제외\n        if (!key.startsWith('return') && key !== 'contextData') {\n          queryObj[key] = value;\n        }\n      });\n      if (Object.keys(queryObj).length > 0) {\n        callbackOptions.query = queryObj;\n      }\n    }\n    \n    // 현재 프래그먼트 보존\n    if (options?.preserveFragment && currentFragment) {\n      callbackOptions.fragment = currentFragment;\n    }\n    \n    // 컨텍스트 데이터 추가\n    if (options?.contextData) {\n      callbackOptions.contextData = options.contextData;\n    }\n    \n    return this.encodeCallback(targetPath, currentPath, callbackOptions);\n  }\n  \n  /**\n   * 스마트 뒤로가기 - 콜백이 있으면 콜백 실행, 없으면 기본 뒤로가기\n   */\n  static smartGoBack(\n    navigate: (path: string) => void,\n    searchParams: URLSearchParams,\n    fallbackPath: string = '/'\n  ): void {\n    const callbackState = this.decodeCallback(searchParams);\n    \n    if (callbackState) {\n      this.executeCallback(navigate, callbackState, { cleanupHistory: true });\n    } else if (window.history.length > 1) {\n      window.history.back();\n    } else {\n      navigate(fallbackPath);\n    }\n  }\n\n  /**\n   * 에러 발생 시 콜백 처리 - 에러 메시지와 함께 지연된 콜백 실행\n   */\n  static handleErrorWithCallback(\n    navigate: (path: string) => void,\n    searchParams: URLSearchParams,\n    options?: {\n      delay?: number;\n      fallbackPath?: string;\n      preserveErrorState?: boolean;\n    }\n  ): void {\n    const delay = options?.delay ?? 3000;\n    const fallbackPath = options?.fallbackPath ?? '/';\n    \n    setTimeout(() => {\n      if (options?.preserveErrorState) {\n        // 에러 상태를 유지하면서 콜백 실행 (에러 메시지가 새 페이지에서도 보이도록)\n        const callbackState = this.decodeCallback(searchParams);\n        if (callbackState && callbackState.returnQuery) {\n          callbackState.returnQuery.error = 'operation_failed';\n        }\n        \n        if (callbackState) {\n          this.executeCallback(navigate, callbackState, { cleanupHistory: true });\n        } else {\n          navigate(fallbackPath + '?error=operation_failed');\n        }\n      } else {\n        this.smartGoBack(navigate, searchParams, fallbackPath);\n      }\n    }, delay);\n  }\n}\n\n/**\n * 콜백 관련 React Hook\n */\nexport const useNavigationCallback = (searchParams: URLSearchParams) => {\n  const callbackState = NavigationCallback.decodeCallback(searchParams);\n  \n  return {\n    hasCallback: !!callbackState,\n    callbackState,\n    executeCallback: (navigate: (path: string) => void) => {\n      if (callbackState) {\n        NavigationCallback.executeCallback(navigate, callbackState, { cleanupHistory: true });\n      }\n    },\n    smartGoBack: (navigate: (path: string) => void, fallbackPath?: string) => {\n      NavigationCallback.smartGoBack(navigate, searchParams, fallbackPath);\n    },\n    handleErrorWithCallback: (\n      navigate: (path: string) => void,\n      options?: {\n        delay?: number;\n        fallbackPath?: string;\n        preserveErrorState?: boolean;\n      }\n    ) => {\n      NavigationCallback.handleErrorWithCallback(navigate, searchParams, options);\n    }\n  };\n};\n\n/**\n * Day 특화 콜백 유틸리티\n */\nexport class DayNavigationCallback extends NavigationCallback {\n  /**\n   * Day 정보를 포함한 콜백 URL 생성\n   */\n  static createDayCallback(targetPath: string, tripId: string, selectedDay: number): string {\n    const returnPath = `/trips/${tripId}`;\n    return this.encodeCallback(targetPath, returnPath, {\n      fragment: `day-${selectedDay}`,\n      contextData: { selectedDay, tripId }\n    });\n  }\n  \n  /**\n   * Day 콜백을 실행하고 특정 Day 탭을 선택\n   */\n  static executeDayCallback(\n    navigate: (path: string) => void,\n    state: NavigationState\n  ): void {\n    this.executeCallback(navigate, state, {\n      cleanupHistory: true,\n      scrollToElement: state.contextData?.selectedDay ? `day-tab-${state.contextData.selectedDay}` : undefined\n    });\n  }\n}"],"names":["NavigationCallback","targetPath","returnPath","options","url","searchParams","state","returnQuery","e","returnFragment","contextData","navigate","key","value","cleanUrl","element","currentPath","currentSearch","currentFragment","callbackOptions","queryObj","fallbackPath","callbackState","delay","useNavigationCallback","DayNavigationCallback","tripId","selectedDay"],"mappings":"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"}