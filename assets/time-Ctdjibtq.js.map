{"version":3,"file":"time-Ctdjibtq.js","sources":["../../src/utils/time.ts"],"sourcesContent":["export const KST_TIMEZONE = 'Asia/Seoul';\n\nconst DEFAULT_DATE_OPTS: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  timeZone: KST_TIMEZONE,\n};\n\n/**\n * Parses a YYYY-MM-DD string into a Date representing UTC midnight for that date.\n * This avoids local timezone side effects when doing day-based arithmetic.\n */\nexport function toDateFromYmdUtc(ymd: string): Date {\n  const [yearStr, monthStr, dayStr] = ymd.split('-');\n  const year = Number(yearStr);\n  const month = Number(monthStr);\n  const day = Number(dayStr);\n  return new Date(Date.UTC(year, month - 1, day));\n}\n\n/** Formats a Date or YYYY-MM-DD as ko-KR date fixed to KST. */\nexport function formatDateKst(\n  dateInput: Date | number | string,\n  options?: Intl.DateTimeFormatOptions\n): string {\n  const opts: Intl.DateTimeFormatOptions = {\n    ...DEFAULT_DATE_OPTS,\n    ...(options || {}),\n    timeZone: KST_TIMEZONE,\n  };\n  const dateObj =\n    typeof dateInput === 'string'\n      ? toDateFromYmdUtc(dateInput)\n      : new Date(dateInput);\n  return dateObj.toLocaleDateString('ko-KR', opts);\n}\n\n/** Returns YYYY-MM-DD in KST for a given Date or YYYY-MM-DD input. */\nexport function formatKstYmd(dateInput: Date | number | string): string {\n  const d =\n    typeof dateInput === 'string'\n      ? toDateFromYmdUtc(dateInput)\n      : new Date(dateInput);\n  const formatter = new Intl.DateTimeFormat('en-CA', {\n    timeZone: KST_TIMEZONE,\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  });\n  return formatter.format(d);\n}\n\n/** Today as YYYY-MM-DD in KST. */\nexport function todayIsoKst(): string {\n  return formatKstYmd(new Date());\n}\n\n/** Adds delta days to a YYYY-MM-DD and returns a Date object (UTC-based). */\nexport function addDaysYmd(ymd: string, deltaDays: number): Date {\n  const base = toDateFromYmdUtc(ymd).getTime();\n  const added = base + deltaDays * 24 * 60 * 60 * 1000;\n  return new Date(added);\n}\n\n/** Extracts YYYY, MM, DD from a Date using UTC getters to avoid local tz. */\nexport function getUtcYmdParts(date: Date): { year: number; month: number; day: number } {\n  return {\n    year: date.getUTCFullYear(),\n    month: date.getUTCMonth() + 1,\n    day: date.getUTCDate(),\n  };\n}\n\n/** Returns 0-6 weekday using UTC to avoid local tz. */\nexport function getUtcWeekday(date: Date): number {\n  return date.getUTCDay();\n}"],"names":["KST_TIMEZONE","toDateFromYmdUtc","ymd","yearStr","monthStr","dayStr","year","month","day","formatKstYmd","dateInput","d","todayIsoKst","addDaysYmd","deltaDays","added","getUtcYmdParts","date","getUtcWeekday"],"mappings":"AAAO,MAAMA,EAAe,aAarB,SAASC,EAAiBC,EAAmB,CAClD,KAAM,CAACC,EAASC,EAAUC,CAAM,EAAIH,EAAI,MAAM,GAAG,EAC3CI,EAAO,OAAOH,CAAO,EACrBI,EAAQ,OAAOH,CAAQ,EACvBI,EAAM,OAAOH,CAAM,EACzB,OAAO,IAAI,KAAK,KAAK,IAAIC,EAAMC,EAAQ,EAAGC,CAAG,CAAC,CAChD,CAoBO,SAASC,EAAaC,EAA2C,CACtE,MAAMC,EACJ,OAAOD,GAAc,SACjBT,EAAiBS,CAAS,EAC1B,IAAI,KAAKA,CAAS,EAOxB,OANkB,IAAI,KAAK,eAAe,QAAS,CACjD,SAAUV,EACV,KAAM,UACN,MAAO,UACP,IAAK,SAAA,CACN,EACgB,OAAOW,CAAC,CAC3B,CAGO,SAASC,GAAsB,CACpC,OAAOH,EAAa,IAAI,IAAM,CAChC,CAGO,SAASI,EAAWX,EAAaY,EAAyB,CAE/D,MAAMC,EADOd,EAAiBC,CAAG,EAAE,QAAA,EACdY,EAAY,GAAK,GAAK,GAAK,IAChD,OAAO,IAAI,KAAKC,CAAK,CACvB,CAGO,SAASC,EAAeC,EAA0D,CACvF,MAAO,CACL,KAAMA,EAAK,eAAA,EACX,MAAOA,EAAK,YAAA,EAAgB,EAC5B,IAAKA,EAAK,WAAA,CAAW,CAEzB,CAGO,SAASC,EAAcD,EAAoB,CAChD,OAAOA,EAAK,UAAA,CACd"}